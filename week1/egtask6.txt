const start = process.hrtime(); // Get the start time
// No callback function
// var fs = require("fs");

// var data = fs.readFileSync('input.txt');

// console.log(data.toString());
// console.log("程序执行结束!");

// With callback function
var fs = require("fs");

fs.readFile('input.txt', function (err, data) {
    if (err) return console.error(err);
    console.log(data.toString());
});

console.log("程序执行结束!");
const end = process.hrtime(start); // Get the end time and calculate the elapsed time

const elapsedSeconds = end[0]; // Seconds
const elapsedNanoseconds = end[1]; // Nanoseconds
const elapsedMilliseconds = (elapsedSeconds * 1000) + (elapsedNanoseconds / 1000000); // Convert to milliseconds

console.log(`Execution time: ${elapsedMilliseconds} ms`);
/*
以上两个实例我们了解了阻塞与非阻塞调用的不同。第一个实例在文件读取完后才执行程序。 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。

因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。
*/